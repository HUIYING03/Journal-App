//
//  FirebaseController.swift
//  Journal App
//
//  Created by Hui Ying on 23/04/2024.
//

import UIKit
import Firebase
import FirebaseFirestoreSwift
import FirebaseAuth
import FirebaseCore
import FirebaseStorage
import UserNotifications

class FirebaseController: NSObject, DatabaseProtocol {


    var listeners = MulticastDelegate<DatabaseListener>()
    
    var authController: Auth
    var currentUser: FirebaseAuth.User?
    
    var database: Firestore
    var userRef: CollectionReference?
    var entryRef: CollectionReference?
    var dateRef: DocumentReference?
    var taskRef: CollectionReference?
    
    let storage: Storage?
    var journalText: String?
    var journalImages: [UIImage] = []
    var currentDate: Date
    var taskList: [TaskTodo]
    
    lazy var appDelegate = {
        guard let appDelegate =  UIApplication.shared.delegate as?  AppDelegate else {
            fatalError("No AppDelegate")
        }
        return appDelegate
    }()
        
    override init(){
        FirebaseApp.configure()
        authController = Auth.auth()
        database = Firestore.firestore()
        storage = Storage.storage()
        currentDate = Date()
        currentUser = authController.currentUser
        taskList = [TaskTodo]()
        
        super.init()
        if authController.currentUser != nil {
            self.userRef = database.collection("users")
//            setupDateListener()
        }
//        setupTaskListener()
        fetchAllTask()
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let dateString = dateFormatter.string(from: currentDate)
        self.datePicked(dateString: dateString)
        
    }
    
    func setReminderTime(time: Date?){
        self.userRef?.document(currentUser!.uid).setData(["time": time])
        guard let time = time else {
            return
        }
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [AppDelegate.SLEEP_IDENTIFIER])
        scheduleDailyNotification(time: time)
    }
    
    
    // AddTaskController - similar
    func scheduleDailyNotification(time: Date) {
        
            guard appDelegate.notificationsEnabled else {
                print("Notifications not enabled")
                return
            }
            // Create notification content
            let content = UNMutableNotificationContent()
            content.title = "Sleep Reminder"
            content.body = "It's time to sleep"
//            content.categoryIdentifier = AppDelegate.SLEEP_IDENTIFIER
//            let userInfo = ["identifier": currentUser!.uid]
            
            let calendar = Calendar.current
            let components = calendar.dateComponents([.hour, .minute], from: time)

            // Use the hour and minute components to create a new DateComponents object
            var notificationComponents = DateComponents()
            notificationComponents.hour = components.hour
            notificationComponents.minute = components.minute

            let trigger = UNCalendarNotificationTrigger(dateMatching: notificationComponents, repeats: true)
//        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 3, repeats: false)
            // Create the notification request
        let request = UNNotificationRequest(identifier: AppDelegate.SLEEP_IDENTIFIER, content: content, trigger: trigger)
            
            // Schedule the notification
            UNUserNotificationCenter.current().add(request) { error in
                if let error = error {
                    print("Error scheduling notification: \(error.localizedDescription)")
                } else {
                    print("Notification scheduled successfully")
                }
            }
        }
    
    func getReminderTime(completion: @escaping (Date?) -> Void) {
        guard let currentUser = Auth.auth().currentUser else {
            // Handle the case where the current user is nil
            completion(nil)
            return
        }
        
        self.userRef?.document(currentUser.uid).getDocument { (document, error) in
            if let document = document, document.exists {
                if let timestamp = document.data()?["time"] as? Timestamp {
                    let retTime = timestamp.dateValue()
                    completion(retTime)
                } else {
                    completion(nil)
                }
            } else {
                completion(nil)
            }
        }
    }

    func fetchAllTask(){
        self.taskRef = userRef?.document(currentUser!.uid).collection("tasks")
        taskRef?.getDocuments {(querySnapshot, error) in
                                
            if let error = error {
                print("Error fetching documents: \(error)")
                return
            }
            guard let documents = querySnapshot?.documents else {
                print("No documents found")
                return
            }
        // Process each document
        for document in documents {
            let data = document.data()
            // Access data fields and perform necessary operations
            let newTask = TaskTodo()
            newTask.id = document.documentID
            newTask.title = data["title"] as? String
            newTask.details = data["details"] as? String
            newTask.priority = data["priority"] as? Int
            newTask.tag = data["tag"] as? String
            newTask.dueDate = data["dueDate"] as? Date
            newTask.reminder = data["reminder"] as? Bool ?? false
            newTask.isComplete = data["isComplete"] as? Bool ?? false
            self.taskList.append(newTask)
        }
        }
    }
    
    
    func addTask(title: String, details: String?, priority: Int, tag: String?, due: Date?, reminder: Bool, isComplete: Bool) -> TaskTodo {
        let newTask = TaskTodo()
        newTask.title = title
        newTask.details = details
        newTask.priority = priority
        newTask.tag = tag
        newTask.dueDate = due
        newTask.reminder = reminder
        newTask.isComplete = isComplete
        do {
            if let newTaskRef = try self.taskRef?.addDocument(from: newTask) {
                self.taskList.append(newTask)
                newTask.id = newTaskRef.documentID
//                print(taskList)
            }
        } catch {
            print("Failed")
        }
        listeners.invoke { listener in
            if listener.listenerType == ListenerType.task {
                listener.onTaskChange(change: .update, tasks: taskList)
            }
        }
        return newTask
    }
    
    func deleteTask(task: TaskTodo) {
        if let taskID = task.id {
            taskRef?.document(taskID).delete()
        }
        taskList.removeAll {$0 == task}
        
        // delete scheduled notification
        let dueDate = task.dueDate
        let title = task.title
        if dueDate != nil && title != nil{
            let matchId = task.title!+task.dueDate!.description
            UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [matchId])
        }
        
        listeners.invoke { (listener) in
            if listener.listenerType == ListenerType.task {
                listener.onTaskChange(change: .remove, tasks: taskList)
            }
        }
    }
    
    func deleteAllTask(){
        self.taskList = []
        taskRef?.getDocuments { (querySnapshot, error) in
                if let error = error {
                    print("Error deleting tasks: \(error.localizedDescription)")
                    return
                }
                guard let querySnapshot = querySnapshot else { return }
                for document in querySnapshot.documents {
                    document.reference.delete()
                }
            }
    }
    
    func insertTask(title: String, details: String?, priority: Int, tag: String?, due: Date?, reminder: Bool, isComplete: Bool, indexInsert: Int){
//        deleteAllTask()
            let newTask = TaskTodo()
            newTask.title = title
            newTask.details = details
            newTask.priority = priority
            newTask.tag = tag
            newTask.dueDate = due
            newTask.reminder = reminder
            newTask.isComplete = isComplete
            do {
                if let newTaskRef = try self.taskRef?.addDocument(from: newTask) {
                    self.taskList.insert(newTask, at: indexInsert)
                    newTask.id = newTaskRef.documentID
    //                print(taskList)
                }
            } catch {
                print("Failed")
            }
            listeners.invoke { listener in
                if listener.listenerType == ListenerType.task {
                    listener.onTaskChange(change: .update, tasks: taskList)
                }
            }
    }
    
 
    func updateTask(task: TaskTodo) {
        let updateRef = userRef?.document(currentUser!.uid).collection("tasks").document(task.id!)
        updateRef?.updateData([
            "isComplete": !task.isComplete
            ]) { error in
                if let error = error {
                    print("Error updating task: \(error.localizedDescription)")
                } else {
                    if let index = self.taskList.firstIndex(where: { $0.id == task.id }) {
                        self.taskList[index].isComplete.toggle()
                    }
                }
            }
    }
    
    func updateTaskReminder(taskID: String, taskReminder: Bool, taskDue: Date) {
        let updateRef = userRef?.document(currentUser!.uid).collection("tasks").document(taskID)
        updateRef?.updateData([
            "reminder" : taskReminder,
            "dueDate" : taskDue
            ]) { error in
                if let error = error {
                    print("Error updating task: \(error.localizedDescription)")
                } else {
                    if let index = self.taskList.firstIndex(where: { $0.id == taskID }) {
                        self.taskList[index].isComplete.toggle()
                    }
                }
            }
    }
    
    func markAsDone(notification: String?) {
        for task in taskList {
            if task.reminder {
                guard let dueDate = task.dueDate, let title = task.title else {
                    continue
                }
                let matchId = task.title!+task.dueDate!.description
                if matchId == notification {
                    if !task.isComplete{
                        updateTask(task: task)
                        listeners.invoke { listener in
                            if listener.listenerType == ListenerType.task {
                                listener.onTaskChange(change: .update, tasks: taskList)
                            }
                    }
                    }
                }
            }
        }
    }
    
    
    func saveText(dateString: String, text: String) {
        do {
            // Use the date string as the document ID
            let documentRef = entryRef?.document(dateString)
            
            // Set the data for the document
            documentRef?.setData([
                "text": text
            ]) { error in
                if let error = error {
                    // Handle error
                    print("Error setting document data: \(error)")
                } else {
                    print("Document \(dateString) successfully saved")
                    let dateFormatter = DateFormatter()
                    dateFormatter.dateFormat = "yyyy-MM-dd"
                    let dateString = dateFormatter.string(from: self.currentDate)
                    self.journalText = text
                    self.listeners.invoke { listener in
                        if listener.listenerType == ListenerType.date {
                            listener.onDateChange(change: .add, date: self.currentDate, text: self.journalText ?? "Enter journal", image: self.journalImages)
                        }
                    }
                }
            }
        }}
    
    func datePicked(dateString: String){
        let db = Firestore.firestore()
        self.entryRef = userRef?.document(currentUser!.uid).collection("entries")
        entryRef?.document(dateString).getDocument { document, error in

            // Check if the document exists
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd"
            self.currentDate = dateFormatter.date(from: dateString)!
            self.journalImages = []
            
            if let document = document, document.exists {
                // Journal entry exists, retrieve and display the data
                let journalData = document.data()
                let journalText = journalData?["text"] as? String ?? ""
                self.journalText = journalText
            } else {
                // No journal entry exists for the current date
                // Display default journal text or indicate that the entry is empty
                self.saveText(dateString: dateString, text: "Enter: ")
            }
            self.fetchJournalImage()
            self.listeners.invoke { listener in
                if listener.listenerType == ListenerType.date {
                    listener.onDateChange(change: .add, date: self.currentDate, text: self.journalText ?? "Enter journal", image: self.journalImages)
                }
            }
        }
    }
    
    func addListener(listener: DatabaseListener) {
//        setupDateListener()
        listeners.addDelegate(listener)
        if listener.listenerType == .date {
            listener.onDateChange(change: .update, date: currentDate, text: self.journalText ?? "", image: self.journalImages)
        }
        if listener.listenerType == .task {
            listener.onTaskChange(change: .update, tasks: taskList)
        }
        
    }
    
    func removeListener(listener: DatabaseListener) {
        listeners.removeDelegate(listener)
    }


    func saveJournalImage(currentDate: Date?, indexPathItem: Int, image: UIImage?){
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let dateString = dateFormatter.string(from: currentDate!)
        let uploadRef = storage?.reference().child("journalImages").child("\(currentUser!.uid)").child("\(dateString)").child("\(indexPathItem).jpg")
        
        guard let imageData = image?.jpegData(compressionQuality: 0.8) else { return }
        let uploadMetaData = StorageMetadata.init()
        uploadMetaData.contentType = "image/jpeg"
        
        uploadRef?.putData(imageData, metadata: uploadMetaData){
            (downloadMetadata, error) in
            if let error = error {
                print(error.localizedDescription)
                return
            }
            self.journalImages.append(image!)
        }
    }
    
    func fetchJournalImage(){
//        var image: UIImage?
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let dateString = dateFormatter.string(from: self.currentDate)
        
        Task {
            do {
                let imageRef = storage?.reference().child("journalImages").child("\(currentUser!.uid)").child("\(dateString)")
                // List all items in the images folder synchronously
                let result = try await imageRef?.listAll()
                
                print(dateString)
                // Iterate over each item (image) in the list
                
                if result!.items.count > 0 {
                    for i in 0...result!.items.count-1 {
                        let childRef = imageRef?.child("\(i).jpg")
                        childRef?.getData(maxSize: 10 * 1024 * 1024) { data, error in
                            if let data = data {
                                let image = UIImage(data: data)
                                self.journalImages.append(image!)
                                self.listeners.invoke { listener in
                                    if listener.listenerType == ListenerType.date {
                                        listener.onDateChange(change: .add, date: self.currentDate, text: self.journalText ?? "Enter journal", image: self.journalImages)
                                    }
                                }
                            } else {
                                print(error?.localizedDescription)
                            }
                        }
                        
                    }
                    
                } else {
                    self.journalImages = []
                }
            } catch {
                // Handle any errors
                print("Error fetching images: \(error.localizedDescription)")
            }
        }
    }
    // USER AUTHENTICATION

    func signUp(email:String, password: String)-> Task<Bool, Error>{
            return Task {
                do {
                    let authResult = try await authController.createUser(withEmail: email, password: password)
                    currentUser = authResult.user
                    self.userRef = database.collection("users")
                    return true
                    // user logged in
                }
                catch {
                    print("User creation failed with error \(error.localizedDescription)")
                    return false
                }
            }
        }
    
    
    func logIn(email: String, password: String)-> Task<Bool, Error>{
           return Task {
               do {
                   let authResult = try await authController.signIn(withEmail: email, password: password)
                   currentUser = authResult.user
                   self.userRef = database.collection("users")
                   return true
               }
               catch {
                   print(error.localizedDescription)
                   return false
               }
               
           }
       }

    
    func logOut() -> Bool {
        if Auth.auth().currentUser != nil {
            do {
                try Auth.auth().signOut()
                print("Successfully logged out")
                return true
            } catch let error {
                // An error occurred while signing out
                print("Error signing out: \(error.localizedDescription)")
                return false
            }
        }
        return false
    }
    
    func changePassword(currentPassword: String, newPassword: String, completion: @escaping (Error?) -> Void) {
        guard let user = currentUser else {
            // User is not signed in
            return
        }
        
        // Reauthenticate user with current password
        let credential = EmailAuthProvider.credential(withEmail: user.email!, password: currentPassword)
            user.reauthenticate(with: credential) { authResult, error in
                if let error = error {
                    // Reauthentication failed
                    print("Error reauthenticating user:", error.localizedDescription)
                    // Handle error appropriately (e.g., display error message to user)
                    return
                }
                
                // Reauthentication succeeded, update password
                user.updatePassword(to: newPassword) { error in
                    if let error = error {
                        // Password update failed
                        print("Error updating password:", error.localizedDescription)
                        // Handle error appropriately (e.g., display error message to user)
                        return
                    }
                    
                    // Password updated successfully
                    print("Password updated successfully")
                    // Optionally, notify user that password has been updated
                }
            }
    }

    

}
